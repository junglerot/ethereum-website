// aqeel #issues
/**
 * issues with loading objs 
 * - while next Js can be ued as a server side framework - when the user loads a page, it can hit 
 * data to a server. it has that functionality, but you don't need to use that.
 * the only server side code that you'd be using - is uring the pipeline creating the static assets
 * we are using next Js to rebuild the ethereum blog. all of that its doing is to create a completel
 * static website, pushing that to a CDN, what's great about that
 * is that it has a server side build time functionality - super fast rendering for the end user
 * it does have routing capabilities, back in the day when i attempted to create animatiosn with routing 
 * but one nice feature is that the current website is buidl with gatsby 
 * it has built in routing, very similar to react-router, similar tool under the hodo
 * - what is nice is taht you get page routes => persistent URLs that the user can navigate too
 * it has the ability to have this page routing => create links that the user can navigate to
 * also allows you to mount to persistent elements that are there across page tranistions 
 * if you wanted that eth glyph and maintain it as a persistent element throughout the navigation 
 * - if its a route we want to go down, there are ways that we can think through to accomplish this
 * its something that pablo and someone else on our team could be very well versed on. 
 * 
 * - agreeing on a feature set and going from there => i would definitely lean towards a framework like
 * nextjS 
 * depending on you want 
 * 
 * - my take would be to try to reimplement it in react, any unforeseen challenges, i am hoping that it is 
 * not as difficult as an undertaking as we might first see
 * - whether we see somethign as next JS or create react app, i don't think there's too much of a difference
 * - my default is to try NextJS 
 * 
 * - react is a big win. grab off the shelf libraries for internationalization
 * in certain ways i can see the argument that nextJs could be overkill for a smal website
 * 
 * there is clear advantages to using tehse frameworks. say you create a barebone react app off the shelf, 
 * if you want to create routing. you would have to do that yourself. advantages with nextJs is that you have a page 
 * directory and for every page it spins up a new one for that. it has cool stuff out of the box.
 * 
 * - pablo: i totally agree and think that it is related to the size of the website, maybe just one or a couple. maybe
 * 
 * TO DO => having a chat with lasse could be beneficial
 * pablo and I are open to having this conversation going, share something  
 * 
 * 
 * 
 */ 
    

 * - https://blog.ethereum.org/id
 * - https://www.npmjs.com/package/react-intl
 * - https://formatjs.io/
 * 
 * the problem with NextJs starts when animation needs to mutate across pages
 * why?
 * because nextJs has an opiniated routing system. its folder based.
 * anytime that you need to share a state between pages. 
 * you need to start using globalc ontext between pages
 * nextJS is not designed for htat
 * if your animation is going to have one state or two states on thehome page 
 * and then when you go tot he other page, you will not have too many transitions.
 * 
 * and you still win the benefits, seo, 
 * 
 * in NextJS => first is server side rendering - you also have client side rendering
 * when you need to transition from page one to page two, it is not going to reload th epage
 * it is not going to do a hard refresh. you can keep this global thing mounted, so you can keep the tranistion
 * what I meant is that NextJS is not designed to do that. 
 * 
 * it is a little tricker to do it. if you need to do super complex animations. but if it is simple, so you can
 * 
 * greensocket => if you want to use that, nextJS has this 
 * 
 * You have normal pages in NextJS, then you have _app, that file lives the entier elifecycle
 * of the app - in there, you can declare the instance, that handles all th elifecyle of the animations
 * r
 *
 * two main challengs for languages:
 * - ride to left support
 * - the size of the words => german are crazy long words that may fuck up your desgin
 * we are trying to create a design system for ethereum.org
 * right to left, so the layout adapt correclty
 * if we design ccorrectly, how we can design these crazy long words
 * each language has a different CSS file. 
 * 
 * we try to find solutions, making the card layout in a different way
 * we don't have special CSS for each languages
 * 
 * design ended up using inter because 
 * 
 * to do: 
 * 
 * 
 * 
 * - research nextJS and threeJS with animations between the pages
 * - we don't have a different style guides
 * => the blog is one that are using nextJS and the ESP website that is using nextJS
 * there is going to be a third one that is the geth website
 * nextJS with the same internationalization. 
 * 
 * - 
 * 
 * 
 * 
 * 
 * - 
 *

 /**
 *
 * 
 * - rendering speed
 * - download file size
 * - multilingual
 * - accessibility 
 * 
 * - threeJS size can be improved from 400KB if its a gzipped version => 150KB (https://github.com/mrdoob/three.js/issues/19148)
 *  - vue 20 KB (server side rendering - ssr)
 *  - react 31K 
 * - preact 3K ?
 * - vueJS 23K
 * - vue? rendered on client too => mix styling more easily unless using styled-components w react
 *  
 * - performance?
 * - integration with threeJS?
 * - maintenance?
 * - animation capabilities?
 * 
 * - how long will this website exist?
 * - how do we maintain it?
 * - what are required features for the site?
 * - internationalization isjust one that I brought up- its top of mind for us - we have a global community
 * about a quarter of traffic comes for instnace is to languages other than english. is it something that we 
 * see that we would want to support? there is probably a good argument that is the case. that has trickle down
 * effects ont he technologies that we want to use 
 * i admittedly don't know much about this type of development - i understand why keeping things super simple and 
 * makes things easier to create. i want to be able to rely on your expertise, it is not able to come in and be the
 * buzzkill
 * what are the technical requirements of this project?
 * 
 * - does not require high speed intenret - more inclsuive to all region 
 * we want to reach
 * - long lasting
 * - will keep maintaining it and adding more features to it
 * 
 * immediate things that come to mind is that it's always trade off and it's a matter of prioritizing off
 * i can understand that we want to make the website be accessible for bandwith
 * 
 * the reason that we're choosing threejs is that we want to tell the story of our vision
 * represented by the infinite garden
 * 
 * - we need a visual metaphor. this is not an educational. it is more of an institutional 
 * website focused on the values of Ethereum
 * in this case, the fireflies represent decentralization, and that is why it cannot be.
 * 
 * - the context => launch for october is going to be the very minimal viable product
 * the website is going to grow and expand since then 
 * 
 * - i frankly don't know how you would add internationalization ? to me there is tradeoff with every approach
 * i just want us to recognize, what we are going to have end up doing is to roll our solutions to facilitiate that
 * and the upfront cost perhaps of implementing that that. 
 * 
 * are there valuable frameworks? 
 * 
 * i'm not sure if i understand your question entirely - when you are saying there are certain advantages such as using 
 * 
 * just want us to align on hard requirements => do you think internationalization is a hard requirement?
 * frankly i just don't know how you'd go about it => how do you handle routing, how do you select state if the user
 * selects a different language 
 * it might be easier than what you say they are
 * just so that we go with eyes wide open - what do we need from this website?
 * and do we have a roadmap on how to solve this?
 * we don't get this website 
 * 
 * => we definitely want the website in different languages. 
 * => again i don't think that 
 * 
 * hard requirement:
 * 
 * - internationalization support 
 * 
 * 
 * - nextjs comparde to gatsby does image optimziation which help with seo
 * this can be done in react too because nextjs is using react behind the scenes
 * using react will enable to use all the libraries
 * and we have the expertise on that because we do translation with react libraries
 * but i agree that it is a balance between scalability and maintainability of the code
 * with react and nextjs and comparing that with vanilla which is going to be mroe custom 
 * code and be more difficult to understand the customc ode in the future 
 * and again all the time that it will take to build those things => internationalization 
 * in vanilla is going to require a lot of time. 
 * 
 * - for context the dev con team has totally moved to nextJS => performance seems to be 
 * the biggest issue. we had to work around differnet things in nextJS. vanilla JS seems to be
 * a bigger lift in terms of availability. 
 * 
 * - performance side => nextJS has that benefit, the output of nextJs is a static page which is
 * performnat - will create the JS that you need in chunks. so basically it creates a performant website
 * for you and abstracts you from doing that. at the end it creates a static website, which is very performant 
 * 
 * - in nexTJS - all the client side code that you want to do - you can do it as a react page. 
 * you don'tneed to do anything different - you can do react code that can load the code
 * 
 * - there are other ways to prefetch the data on build time, if you want to have the initial data
 * already in the page - you can do that, to make it more performant. then again, the client side code is going to be
 * the same as a react application
 * 
 * in short => different ways you can go about it, you can probably implement things exactly the same way 
 * if you want to do in a vanilla JS, you can pull data and accomplish the same thing
 * 
 * nextJS sounds like a big scary framework that has server side stuff going on - it comes with a lot of
 * stuff out of the box which makes everything easier
 * 
 * 
 * 
 * 
 */
